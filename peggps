#!/usr/bin/perl
#
# Print the given postscript file to the connected Casio label printer.
# One point will be treated as one pixel (as if the postscript was displayed
# at 100% screen resolution on a 72DPI screen).
# Therefore the %%BoundingBox comment will determine the initial size of
# the output file in pixels.  Then it will be auto-cropped down to the minimum
# width (via ImageMagick), converted to XBM, sent to xbm2crw, then the
# output of that is sent to the printer.  Hopefully the result is no more
# label waste than is strictly necessary (although the printer leaves
# a tail on every label anyway, due to the distance between the print head
# and the label cutting blade).
#
# Copyright 2011 Shawn T. Rutledge s@ecloud.org
# Released under the GPL license
#

use POSIX qw(tmpnam);

sub runOrDie
{
	my($cmd) = @_;
	print "will run $cmd\n";
	$ret = system($cmd);
	if ($ret) {
		msg("$cmd failed with exit code $ret\n");
		exit($ret);
	}
}


($infile) = @ARGV;
# default dimensions
$length = 512;
$height = 64;

open(inf, $infile);
$foundBounds = 0;
$line = <inf>;
while ($line && !$foundBounds)
{
	if ($line =~ /%%BoundingBox:\s+\d+\s+\d+\s+(\d+)\s+(\d+).*/)
	{
		$length = $1;
		$height = $2;
		$foundBounds = 1;
	}
	$line = <inf>;
}
close(inf);

print "initial bounding box: $length x $height points\n";

$tmpname = tmpnam();
$pbmname = $tmpname . "_pegg_tmp.pbm";
$xbmname = $tmpname . "_pegg_tmp.xbm";
$rawname = $xbmname . ".crw";
print "got tmp file $pbmname\n";

&runOrDie("/usr/bin/pstopnm -pbm -xsize $length -ysize $height -xborder 0 -yborder 0 -stdout $infile > $pbmname");
&runOrDie("/usr/bin/convert $pbmname -background white -splice 0x1  -background black -splice 0x1 -trim  +repage -chop 0x1 $xbmname");
&runOrDie("/usr/local/bin/xbm2crw $length $height $xbmname");
&runOrDie("/usr/local/bin/pegg $rawname");

unlink($pbmname);
unlink($xbmname);
unlink($rawname);
